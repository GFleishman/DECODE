name: Build DECODE and upload to Anaconda Cloud


# use on: [push] for testing
on:
  release:
    types: [edited, published]

jobs:
  # this is a pure Python noarch build; we use Linux for convenience
  build-linux:
    runs-on: ubuntu-latest

    env:
      FILENAMES: temp-filenames.txt

    steps:
    - uses: actions/checkout@v2
      # this grabs the release commit
      with:
        ref: ${{ github.ref }}

    - name: Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install conda build libraries
      run: |
        $CONDA/bin/conda install conda-build anaconda-client

    # build, then also store the file paths that were built
    - name: Build DECODE
      run: |
        cd ./conda
        $CONDA/bin/conda-build -c turagalab -c pytorch -c conda-forge decode
        $CONDA/bin/conda-build -c turagalab -c pytorch -c conda-forge decode --output > $FILENAMES

    # upload to Anaconda Cloud; separate step to minimize exposure of the token
    - name: Upload to Anaconda Cloud
      env:
        ANACONDA_TOKEN: ${{ secrets.TURAGALAB_ANACONDA_TOKEN }}
      run: |
        cd ./conda
        while read PATH; do
          $CONDA/bin/anaconda -t $ANACONDA_TOKEN upload -u Turagalab $PATH
        done < $FILENAMES


  build-linux-pip:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      # this grabs the release commit
      with:
        ref: ${{ github.ref }}

    - name: Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - uses: conda-incubator/setup-miniconda@v2
      with:
        environment-file: environment.yaml
        python-version: 3.8
        auto-activate-base: false
        activate-environment: pip-build

    - name: Build DECODE (pip)
      id: pip-build
      shell: bash -l {0}
      run: |
        pip install wheel
        python setup.py bdist_wheel
        WHEEL=$(ls dist)
        echo "::set-output name=wheel_filename::$WHEEL"

    - name: Upload to GitHub release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/${{ steps.pip-build.outputs.wheel_filename }}
        asset_name: ${{ steps.pip-build.outputs.wheel_filename }}
        asset_content_type: binary/octet-stream

